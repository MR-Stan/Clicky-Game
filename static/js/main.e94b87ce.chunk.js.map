{"version":3,"sources":["assets sync /^/images.*$","assets/images/ceres.jpg","assets/images/earth.jpg","assets/images/eris.jpg","assets/images/haumea.jpg","assets/images/jupiter.jpg","assets/images/luna.jpg","assets/images/makemake.jpg","assets/images/mars.jpg","assets/images/mercury.jpg","assets/images/milkyway.jpg","assets/images/neptune.jpg","assets/images/pluto.jpg","assets/images/saturn.jpg","assets/images/sun.jpg","assets/images/uranus.jpg","assets/images/venus.jpg","components/SolarBodyCard.jsx","components/ScoreCard.jsx","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","SolarBodyCard","props","Card","className","onClick","onImgClick","CardBody","CardText","name","CardImg","src","image","ScoreCard","score","highScore","App","state","solarBodies","clicked","oLetsDoIt","includes","setState","push","shuffled","array","i","length","j","Math","floor","random","tempArr","shuffle","this","CardTitle","CardSubtitle","Container","Row","item","Col","xs","sm","md","lg","key","require","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e94b87ce.chunk.js","sourcesContent":["var map = {\n\t\"./images/ceres.jpg\": 28,\n\t\"./images/earth.jpg\": 29,\n\t\"./images/eris.jpg\": 30,\n\t\"./images/haumea.jpg\": 31,\n\t\"./images/jupiter.jpg\": 32,\n\t\"./images/luna.jpg\": 33,\n\t\"./images/makemake.jpg\": 34,\n\t\"./images/mars.jpg\": 35,\n\t\"./images/mercury.jpg\": 36,\n\t\"./images/milkyway.jpg\": 37,\n\t\"./images/neptune.jpg\": 38,\n\t\"./images/pluto.jpg\": 39,\n\t\"./images/saturn.jpg\": 40,\n\t\"./images/sun.jpg\": 41,\n\t\"./images/uranus.jpg\": 42,\n\t\"./images/venus.jpg\": 43\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 27;","module.exports = __webpack_public_path__ + \"static/media/ceres.9bcb5e5a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/earth.92dce846.jpg\";","module.exports = __webpack_public_path__ + \"static/media/eris.37643780.jpg\";","module.exports = __webpack_public_path__ + \"static/media/haumea.1bec68ba.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jupiter.ae13ff67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/luna.8d02df8e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/makemake.0d30febc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mars.3ee6a1fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mercury.ddf30d51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/milkyway.a765b237.jpg\";","module.exports = __webpack_public_path__ + \"static/media/neptune.4fb8677f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pluto.9d0db0be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/saturn.321278ae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sun.1063e31e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/uranus.e47676a0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/venus.8899383b.jpg\";","import React from 'react';\nimport {\n    Card, CardImg, CardText, CardBody\n} from 'reactstrap';\nimport '../assets/css/SolarBodyCard.css'\n\nconst SolarBodyCard = props => {\n    return (\n        <Card className='SolarBodyCard' onClick={() => props.onImgClick(props.id)}>\n            <CardBody>\n                {<CardText>{props.name}</CardText>}\n            </CardBody>\n            <CardImg className='h-100' src={props.image}></CardImg>\n        </Card>\n    )\n}\n\nexport default SolarBodyCard;","import React from 'react';\nimport {\n    Card, CardText, CardBody\n} from 'reactstrap';\nimport '../assets/css/ScoreCard.css'\n\nconst ScoreCard = props => {\n    return (\n        <Card>\n            <CardBody className='scorecard'>\n                <CardText>Score: {props.score}</CardText>\n                <CardText>High Score: {props.highScore}</CardText>\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default ScoreCard;","import React, { Component } from 'react';\nimport {\n  Card, CardBody, CardTitle, CardSubtitle, Container, Row, Col\n} from 'reactstrap';\nimport solarBodies from './solarBodies.json'\nimport './assets/css/App.css';\nimport SolarBodyCard from './components/SolarBodyCard.jsx';\nimport ScoreCard from './components/ScoreCard.jsx'\n\nclass App extends Component {\n  // setting initial state\n  state = {\n    // importing json data\n    solarBodies,\n    // what's been clicked\n    clicked: [],\n    // score counter\n    score: 0,\n    // high score counter\n    highScore: 0\n  }\n\n  oLetsDoIt = id => {\n    if (!this.state.clicked.includes(id)) {\n      this.state.clicked.push(id);\n      this.setState({\n        score: this.state.score + 1\n      });\n      if (this.state.score >= this.state.highScore) {\n        this.setState({\n          highScore: this.state.score + 1\n        });\n      }\n    }\n    else {\n      this.setState({\n        clicked: [],\n        score: 0\n      });\n    }\n  }\n\n  render() {\n    const shuffled = shuffle(this.state.solarBodies);\n    return (\n      <Card className='blackBG whiteText'>\n        <CardBody className='text-center'>\n          <CardTitle className='title'>Solar Memory Click Game</CardTitle>\n          <CardSubtitle className='subtitle'>Click on solar bodies to earn points, but don't click the same body more than once or you lose!</CardSubtitle>\n          <ScoreCard score={this.state.score} highScore={this.state.highScore} />\n          <Container>\n            <Row>\n              {shuffled.map(item => (\n                <Col xs='12' sm='6' md='4' lg='3'>\n                  <SolarBodyCard\n                    key={item.id}\n                    id={item.id}\n                    image={require('./assets/images' + item.image)}\n                    name={item.name}\n                    onImgClick={() => this.oLetsDoIt(item.id)}\n                  />\n                </Col>\n              ))}\n            </Row>\n          </Container>\n        </CardBody>\n      </Card>\n    )\n  }\n\n}\n\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const tempArr = array[i];\n    array[i] = array[j];\n    array[j] = tempArr;\n  }\n  return array;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}